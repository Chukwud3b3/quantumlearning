from qiskit import *

qc = QuantumCircuit(8,7)

qc.h(0) #hadamard gates on first 7 qubits
qc.h(1)
qc.h(2)
qc.h(3)
qc.h(4)
qc.h(5)
qc.h(6)
qc.x(7)
qc.h(7) #qubit 7 is the ancilla qubit also known as the helper qubit

qc.barrier()

qc.cx(1,7) # controlled not gates between the ancilla qubit and q1, q3 and q6
qc.cx(3,7)
qc.cx(6,7) #this action basically flips the state of the qubits 1,3 and 6

qc.barrier()

qc.h(0) # apply hadamard gates on first 7 qubits again
qc.h(1)
qc.h(2)
qc.h(3)
qc.h(4)
qc.h(5)
qc.h(6)
qc.barrier()

qc.measure(0,0)
qc.measure(1,1)
qc.measure(2,2)
qc.measure(3,3)
qc.measure(4,4)
qc.measure(5,5)
qc.measure(6,6) #measure the result of the circuit implementation

qc.draw(output = "mpl")#circuit visualization tool

simulator = Aer.get_backend('qasm_simulator')
result = execute(qc, backend = simulator, shots = 1024).result() #execute the circuit on qasm simulator, with a total of 1024 shots
counts = result.get_counts()
print(counts)# prints the result of the circuit execution

from qiskit.visualization import plot_histogram
plot_histogram(result.get_counts(qc))

